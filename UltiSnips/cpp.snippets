## macros

snippet #def "#define ..."
#define $1
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #in "include " b
#include "${1:name.h}"
endsnippet

snippet #i "include <>" b
#include <${1:iostream}>
endsnippet

snippet #c
#ifdef __cplusplus
extern "C"
{
#endif

${0}

#ifdef __cplusplus
} /* extern "C" */
#endif
##
## Control Statements
# if
snippet if
endsnippet

## class, namespace
snippet struct "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

snippet class "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet raii
class ${1:name}
{
public:
	$1();
	~$1();
	
	// no copy
	$1(const $1& rhs) = delete;
	$1& operator=($1 rhs) = delete;
private:
};
endsnippet

snippet namespace "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

## functions
snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet mainv "int main(void){ ... }"
int main(void)
{
	${0}
	return 0;
}
endsnippet

snippet af "auto function"
auto ${1:name}(${2}) -> ${3:void}
{
	${0}
};
endsnippet

## flow control
snippet if
if (${1:true})
{
	${0:${VISUAL}}
}
endsnippet

snippet ife "if .. else"
if (${1:true})
{
	${2:${VISUAL}}
}
else
{
	${0}
}
endsnippet

snippet else "else {}"
else
{
	${0:${VISUAL}}
}
endsnippet

snippet elif "else if"
else if (${1:true})
{
	${0:${VISUAL}}
}
endsnippet

snippet ifi "one line if"
if (${1:true}) ${0};
endsnippet

snippet "(?<=\W)t|^t" "ternary " r
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

snippet switch
switch (${1:/* variable */})
{
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		break;
}
endsnippet

snippet case
case ${1:/* variable case */}:
	${2}
	${3:break;}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}$0
}
endsnippet

snippet fore
for (auto${1:& item} : ${2:container})
{
	${VISUAL}$0
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}$0
}
endsnippet

snippet for2
for (int ${1:y} = 0; $1 < ${2:rows}; ++$1) 
{
	for (int ${3:x} = 0; $3 < ${4:cols}; ++$3) 
	{
		${0}
	}
}
endsnippet

snippet forit "for(iter = ; iter != .. ; ++iter)"
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4)
{
	${6}
}
endsnippet

snippet forita
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1)
{
	${3:std::cout << *$1 << std::endl;}
}
endsnippet

snippet while "while"
while (${1:/* condition */})
{
	${VISUAL}$0
}
endsnippet

snippet try "try .. catch .."
try
{

}
catch(${1})
{

}
endsnippet

## basic
snippet s "std::string " w
std::string
endsnippet

snippet ce "constexpr" w
constexpr 
endsnippet

snippet ns "namespace" w
namespace 
endsnippet

snippet us "using" w
using ${1:name} = ${2:value};
endsnippet

snippet te "template<typename T> " w
template <typename ${1:T}>
endsnippet

snippet be "begin end " w
${1:ctn.}begin(), $1end()
endsnippet

snippet cout "cout<T>" w
std::cout << ${1} << std::endl;
endsnippet

snippet cin "cin<T>" w
std::cin >> ${1};
endsnippet

## stl
snippet array "array<T>" w
std::array<${1:T}, ${2:N}> ${3};
endsnippet

snippet vector "vector<T>" w
std::vector<${1:T}> ${2};
endsnippet

snippet deque "deque<T>" w
std::deque<${1:T}> ${2};
endsnippet

snippet flist "forward_list<T>" w
std::forward_list<${1:T}> ${2};
endsnippet

snippet list "list<T>" w
std::list<${1:T}> ${2};
endsnippet

snippet set "set<T>" w
std::set<${1:T}> ${2};
endsnippet

snippet map "map<T>" w
std::map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet mset "multiset<T>" w
std::multiset<${1:T}> ${2};
endsnippet

snippet mmap "multimap<T>" w
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet uset "unordered_set<T>" w
std::unordered_set<${1:T}> ${2};
endsnippet

snippet umap "unordered_map<T>" w
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet umset "unordered_multiset<T>" w
std::unordered_multiset<${1:T}> ${2};
endsnippet

snippet ummap "unordered_multimap<T>" w
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet stack "stack<T>" w
std::stack<${1:T}> ${2};
endsnippet

snippet queue "queue<T>" w
std::queue<${1:T}> ${2};
endsnippet

snippet pqueue "priority_queue<T>" w
std::priority_queue<${1:T}> ${2};
endsnippet

snippet spca "static smart pointer cast" w
std::static_pointer_cast<${1:type}>(${VISUAL}$0)
endsnippet

snippet dpca "dynamic smart pointer cast" w
std::dynamic_pointer_cast<${1:type}>(${VISUAL}$0)
endsnippet

snippet cpca "const smart pointer cast" w
std::const_pointer_cast<${1:type}>(${VISUAL}$0)
endsnippet

snippet rpca "reinterpret smart pointer cast" w
std::reinterpret_pointer_cast<${1:type}>(${VISUAL}$0)
endsnippet

snippet sca "static pointer cast" w
std::static_cast<${1:type}>(${VISUAL}$0)
endsnippet

snippet dca "dynamic pointer cast" w
std::dynamic_cast<${1:type}>(${VISUAL}$0)
endsnippet

snippet cca "const pointer cast" w
std::const_cast<${1:type}>(${VISUAL}$0)
endsnippet

snippet rca "reinterpret pointer cast" w
std::reinterpret_cast<${1:type}>(${VISUAL}$0)
endsnippet

snippet move "move" w
std::move($0)
endsnippet

snippet fd "forward" w
std::forward<${1:T}>($0)
endsnippet

snippet ar
std::${1:sort}(${2:ctn.}begin(), $2end());
endsnippet

snippet arr
std::${1:sort}(${2:ctn.}begin(), $2end(), ${3:ctn.}begin(), $3end());
endsnippet

snippet lambda "lambda" w
[](${1:arg})->void
{
	${VISUAL}$0
}
endsnippet

snippet dt "declare type" w
decltype($0)
endsnippet

snippet sp "shared pointer" w
std::shared_ptr<${1:type}>
endsnippet

snippet ms "make shared" w
std::make_shared<$1>($0)
endsnippet

snippet up "unique pointer" w
std::unique_ptr<${1:type}>
endsnippet

snippet mu "make unique" w
std::make_unique<$1>($0)
endsnippet

snippet wp "weak pointer" w
std::weap_ptr<${1:type}>
endsnippet

snippet map1 "functional map" w
std::transform(${1:ctn.}begin(), $1end(), ${2:dest_iter}, ${3:unary_op});
endsnippet

snippet map2 "functional zip" w
std::transform(${1:ctn1.}begin(), $1end(), ${2:ctn2.beg()}, ${3:dest_iter}, ${3:binary_op});
endsnippet

snippet box0
//==============================================================================
//${0}
//==============================================================================
endsnippet

snippet box1
//------------------------------------------------------------------------------
//${0}
//------------------------------------------------------------------------------
endsnippet

## osg
snippet onew
osg::ref_ptr<${1}> ${2} = new $1(${3});
endsnippet

snippet osgMain
#include <osgViewer/Viewer>
#include <osgViewer/ViewerEventHandlers>
#include <osgUtil/PrintVisitor>

osg::ref_ptr<osg::Group> root;

int main(int argc, char* argv[])
{
	root = new osg::Group;
	osg::StateSet* ss = root->getOrCreateStateSet();
	ss->setMode(GL_LIGHTING, osg::StateAttribute::OFF);
	ss->setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);
	
	osgViewer::Viewer viewer;
	viewer.addEventHandler(new osgViewer::StatsHandler);
	viewer.setSceneData(root);

	osg::ref_ptr<osgUtil::PrintVisitor> pv = new osgUtil::PrintVisitor(osg::notify(osg::NOTICE));
	root->accept(*pv);
	
	return viewer.run();
} endsnippet

snippet osgNodeCallback
class ${1:MyUpdateCallback} : public osg::NodeCallback
{
	virtual void operator()(osg::Node* node, osg::NodeVisitor* nv)
	{
		traverse(node,nv);
	}
};
endsnippet

snippet osgDrawCallback
class ${1:MyDrawableDrawCallback} : public osg::Drawable::DrawCallback
{
	virtual void drawImplementation(osg::RenderInfo& renderInfo,const osg::Drawable* drawable) const
	{
		//pre draw implementation

		drawable->drawImplementation(renderInfo);

		//post draw Implementation

	}
};
endsnippet

snippet osgText
osg::ref_ptr<osgText::Text> ${1:text} = new osgText::Text;
$1->setDataVariance(osg::Object::DYNAMIC);
$1->setCharacterSize(20);
$1->setAxisAlignment(osgText::TextBase::XY_PLANE);
$1->setPosition(osg::Vec3(20, height - 30, 0));
$1->setFont(osgText::readFontFile("fonts/arial.ttf"));
$1->setText("$0");
endsnippet

snippet osgDeltaTime
static GLfloat lastTime = ${1:nv}->getFrameStamp()->getReferenceTime();
GLfloat currentTime = $1->getFrameStamp()->getReferenceTime();
GLfloat deltaTime = currentTime - lastTime;
lastTime = currentTime;
endsnippet

snippet osgDrawableUpdateCallback
class ${1:MyDrawableUpdateCallback} : public osg::Drawable::UpdateCallback
{
	virtual void update(osg::NodeVisitor* nv, osg::Drawable* drawable)
	{

	}
};
endsnippet

snippet osgComputeBoundingBoxCallback
struct ${1:Classname} : public osg::Drawable::ComputeBoundingBoxCallback 
{
	virtual osg::BoundingBox computeBound(const osg::Drawable&) const
	{ 
		return osg::BoundingBox();
	}
};

endsnippet

snippet osgDrawableCullCallback
class ${1:MyDrawableCullCallback} : public osg::Drawable::CullCallback
{
	virtual bool cull(osg::NodeVisitor* nv, osg::Drawable* drawable, osg::State* state) const
	{
		return false;
	}
};
endsnippet

snippet osgReadFileCallback
class ${1:MyReadFileCallback} : public osgDB::Registry::ReadFileCallback
{
public:
	virtual osgDB::ReaderWriter::ReadResult readNode(const std::string& fileName, const osgDB::ReaderWriter::Options* options)
	{
		// before readNode
		// note when calling the Registry to do the read you have to call readNodeImplementation NOT readNode, as this will
		// cause on infinite recusive loop.
		osgDB::ReaderWriter::ReadResult result = osgDB::Registry::instance()->readNodeImplementation(fileName,options);
		//after readNode
		return result;
	}
};
endsnippet

snippet osgParticleSystem
osg::ref_ptr<osgParticle::ParticleSystemUpdater> psu = new osgParticle::ParticleSystemUpdater;
osg::ref_ptr<osgParticle::ParticleSystem> ps  = new osgParticle::ParticleSystem();
ps->getDefaultParticleTemplate().setShape(osgParticle::Particle::POINT);
ps->getDefaultParticleTemplate().setColorRange(osgParticle::rangev4(INVADER_COLOR, INVADER_COLOR));

osg::ref_ptr<osg::BlendFunc> blendFunc  = new osg::BlendFunc();
blendFunc->setFunction(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
osg::ref_ptr<osg::Texture2D> texture  = new osg::Texture2D();
texture->setImage(osgDB::readImageFile("Images/smoke.rgb"));

osg::StateSet* ss = ps->getOrCreateStateSet();
ss->setAttributeAndModes(blendFunc);
ss->setTextureAttributeAndModes(0, texture);
ss->setAttribute(new osg::Point(6));
ss->setTextureAttributeAndModes(0, new osg::PointSprite);
ss->setMode(GL_LIGHTING, osg::StateAttribute::OFF);
ss->setRenderingHint(osg::StateSet::TRANSPARENT_BIN);

osg::ref_ptr<osgParticle::ModularEmitter> emitter  = new osgParticle::ModularEmitter();
emitter->setParticleSystem(ps);

osg::ref_ptr<osgParticle::RandomRateCounter> rrc  = new osgParticle::RandomRateCounter();
rrc->setRateRange(60, 120);
emitter->setCounter(rrc);

osgParticle::RadialShooter* shooter = static_cast<osgParticle::RadialShooter*>(emitter->getShooter());
shooter->setThetaRange(osg::PI * 0.5f, osg::PI * 0.5f);
shooter->setInitialSpeedRange(1, 5);

osg::ref_ptr<osgParticle::ModularProgram> program  = new osgParticle::ModularProgram();
program->setParticleSystem(ps);
osg::ref_ptr<osgParticle::AccelOperator> accel  = new osgParticle::AccelOperator();
//accel->setAcceleration(osg::Vec3(0, 0, 100));
//program->addOperator(accel);

osg::ref_ptr<osg::Geode> psLeaf  = new osg::Geode();
psLeaf->addDrawable(ps);

addChild(psLeaf);
addChild(program);
addChild(emitter);
psu->addParticleSystem(ps);
endsnippet

snippet osgGuiEventHandler
class ${1:MyGuiEventHandler} : public osgGA::GUIEventHandler
{
	virtual bool handle(const osgGA::GUIEventAdapter& ea, osgGA::GUIActionAdapter& aa)
	{
		switch (ea.getEventType())
		{
			case osgGA::GUIEventAdapter::KEYDOWN:
				switch (ea.getKey())
				{
					case osgGA::GUIEventAdapter::KEY_F1:
						break;
					default:
						break;
				}
				break;
			default:
				break;
		}
		return false; //return true will stop event
	}
};
endsnippet

snippet osgObjectDescendent
class ${1:Classname} : public osg::${2:Object}
{
public:

$1(){}
$1(const $1& copy, const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY)
		: osg::$2(copy, copyop) {}
~$1(){}
META_${3:Object}(${4:zxd}, $1);

};
endsnippet

snippet osgGeometry
osg::ref_ptr<osg::Geometry> ${1:geometry} = new osg::Geometry;
osg::ref_ptr<osg::Vec3Array> vertices = new osg::Vec3Array();
osg::ref_ptr<osg::Vec4Array> colors = new osg::Vec4Array(osg::Array::BIND_OVERALL);

$1->setVertexArray(vertices);
$1->setColorArray(colors);

$1->addPrimitiveSet(new ${2:osg::DrawArrays(GL_POINTS, 0, 1)});

osg::StateSet* ss = $1->getOrCreateStateSet();
endsnippet

snippet osgTexture2
osg::Texture2D* ${1:texture} = new osg::Texture2D;
$1->setTextureSize(width, height);
$1->setInternalFormat(GL_RGBA);
$1->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
$1->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
$1->setFilter(osg::Texture2D::MIN_FILTER, osg::Texture2D::LINEAR);
$1->setFilter(osg::Texture2D::MAG_FILTER, osg::Texture2D::LINEAR);
endsnippet

snippet osgCameraRayTest
osgUtil::IntersectionVisitor iv;
osg::ref_ptr<osgUtil::LineSegmentIntersector> lsi =
	new osgUtil::LineSegmentIntersector(
osgUtil::Intersector::WINDOW, ea.getX(), ea.getY());
iv.setIntersector(lsi);
//iv.setTraversalMask(selectMask);

camera->accept(iv);

if (lsi->containsIntersections()) {
	const osgUtil::LineSegmentIntersector::Intersection& result =
*lsi->getIntersections().begin();

} else {

}
endsnippet

snippet osgDecomposeMatrix
osg::Vec3 ${2:translation};
osg::Quat ${3:rotation};
osg::Vec3 ${4:scale};
osg::Quat ${5:so};
${1:m->}decompose($2, $3, $4, $5);
endsnippet

snippet osgCreateGraphicsContext
// create graphics context
osg::ref_ptr<osg::GraphicsContext::Traits> traits =
	new osg::GraphicsContext::Traits();

GLuint width = 800, height = 600;
osg::GraphicsContext::WindowingSystemInterface* wsi =
osg::GraphicsContext::getWindowingSystemInterface();
if (!wsi) OSG_FATAL << "failed to get window system interface " << std::endl;
wsi->getScreenResolution(
osg::GraphicsContext::ScreenIdentifier(0), width, height);

traits->x = 0;
traits->y = 0; // 0,0 is upper left , not lower left
traits->width = width;
traits->height = height;
traits->doubleBuffer = true;
traits->sharedContext = 0;
traits->windowDecoration = false;
//traits->alpha = 8;

osg::GraphicsContext* gc =
osg::GraphicsContext::createGraphicsContext(traits);
if (!gc) OSG_FATAL << "failed to creaate graphics context " << std::endl;
endsnippet

snippet osgGetCameraPerspective
//becareful fovy not in radian
double fovy, aspectRatio, zNear, zFar;
${1:camera}->getProjectionMatrixPerspective( fovy, aspectRatio, zNear, zFar);
endsnippet

snippet osgGetCameraFrustum
double left, right, bottom, top, near, far;
${1:camera}->getProjectionMatrixAsFrustum(
	left, right, bottom, top, near, far);
endsnippet

snippet osgGetCameraOrtho
double left, right, bottom, top, near, far;
${1:camera}->getProjectionMatrixAsOrtho(
	left, right, bottom, top, near, far);
endsnippet

snippet osgCreateAnimation
osg::ref_ptr<osgAnimation::BasicAnimationManager> manager =
	new osgAnimation::BasicAnimationManager;

osg::ref_ptr<osgAnimation::Animation> animation = new osgAnimation::Animation;
animation->setPlayMode(osgAnimation::Animation::${1:ONCE});

manager->registerAnimation(animation.get());

osg::ref_ptr<${2:osgAnimation::FloatLinearChannel}> ch = new $2;
ch->setName("${3:channelName}");
ch->setTargetName("${4:targetName}");
//populate channel data

animation->addChannel(ch.get());

osg::ref_ptr<osgAnimation::UpdateMatrixTransform> updater =
	new osgAnimation::UpdateMatrixTransform($4);
//populate updater element

endsnippet

## opengl
snippet glTexture
glGenTextures(1, &${1:tex});
glBindTexture(GL_TEXTURE_2D, $1);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

GLfloat borderColor[] = {1.0, 1.0, 1.0, 1.0};
glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);

// setup texture compare, this will be used by shadow2D
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_FUNC, GL_LESS);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_R_TO_TEXTURE);
glTexParameteri(GL_TEXTURE_2D, GL_DEPTH_TEXTURE_MODE, GL_LUMINANCE);

glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, IMAGE_WIDTH, IMAGE_HEIGHT, 0, GL_RGBA, GL_UNSIGNED_BYTE, 0);
endsnippet

snippet glCubemapTexture
glGenTextures(1, &${1:tex});
glBindTexture(GL_TEXTURE_2D, $1);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
for (int i = 0; i < 6; ++i) {
	glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT, 0, GL_RGBA, TEXWIDTH,
		TEXHEIGHT, 0, GL_RGBA, GL_UNSIGNED_BYTE, pixelData);
}
endsnippet

snippet glDirectionalLight
GLfloat light_position${1:0}[] = {1.0, 1.0, 1.0, 0.0};
GLfloat light_diffuse$1[] = {0.0, 0.0, 0.0, 1.0};
GLfloat light_specular$1[] = {0.0, 0.0, 0.0, 1.0};
GLfloat light_ambient$1[] = {0.0, 0.0, 0.0, 1.0};

glLightfv(GL_LIGHT$1, GL_POSITION, light_position$1);
glLightfv(GL_LIGHT$1, GL_DIFFUSE, light_diffuse$1);
glLightfv(GL_LIGHT$1, GL_SPECULAR, light_specular$1);
glLightfv(GL_LIGHT$1, GL_AMBIENT, light_ambient$1);
endsnippet

snippet glPointLight
GLfloat light_position${1:0}[] = {1.0, 1.0, 1.0, 1.0};
GLfloat light_diffuse$1[] = {0.0, 0.0, 0.0, 1.0};
GLfloat light_specular$1[] = {0.0, 0.0, 0.0, 1.0};
GLfloat light_ambient$1[] = {0.0, 0.0, 0.0, 1.0};
GLfloat light_attenuation$1[] = {1, 0, 0};

glLightfv(GL_LIGHT$1, GL_POSITION, light_position$1);
glLightfv(GL_LIGHT$1, GL_DIFFUSE, light_diffuse$1);
glLightfv(GL_LIGHT$1, GL_SPECULAR, light_specular$1);
glLightfv(GL_LIGHT$1, GL_AMBIENT, light_ambient$1);
glLightf(GL_LIGHT$1, GL_CONSTANT_ATTENUATION, light_attenuation$1[0]);
glLightf(GL_LIGHT$1, GL_LINEAR_ATTENUATION, light_attenuation$1[1]);
glLightf(GL_LIGHT$1, GL_QUADRATIC_ATTENUATION, light_attenuation$1[2]);
endsnippet

snippet glSpotLight
GLfloat light_position${1:0}[] = {1.0, 1.0, 1.0, 1.0};
GLfloat light_diffuse$1[] = {0.0, 0.0, 0.0, 1.0};
GLfloat light_specular$1[] = {1.0, 1.0, 1.0, 1.0};
GLfloat light_ambient$1[] = {0.0, 0.0, 0.0, 1.0};
GLfloat light_attenuation$1[] = {1, 0, 0};
GLfloat spot_dir$1[] = {0, 0, -1};
GLfloat spot_cutoff$1 = 180;
GLfloat spot_exponent$1 = 0;

glLightfv(GL_LIGHT$1, GL_POSITION, light_position$1);
glLightfv(GL_LIGHT$1, GL_DIFFUSE, light_diffuse$1);
glLightfv(GL_LIGHT$1, GL_SPECULAR, light_specular$1);
glLightfv(GL_LIGHT$1, GL_AMBIENT, light_ambient$1);
glLightf(GL_LIGHT$1, GL_CONSTANT_ATTENUATION, light_attenuation$1[0]);
glLightf(GL_LIGHT$1, GL_LINEAR_ATTENUATION, light_attenuation$1[1]);
glLightf(GL_LIGHT$1, GL_QUADRATIC_ATTENUATION, light_attenuation$1[2]);
glLightfv(GL_LIGHT$1, GL_SPOT_DIRECTION, spot_dir$1);
glLightf(GL_LIGHT$1, GL_SPOT_CUTOFF, spot_cutoff$1);
glLightf(GL_LIGHT$1, GL_SPOT_EXPONENT, spot_exponent$1);
endsnippet

snippet glMaterial
GLfloat mat_ambient[] = {0.2, 0.2, 0.2, 1.0};
GLfloat mat_diffuse[] = {0.8, 0.8, 0.8, 0.8};
GLfloat mat_specular[] = {0.0, 0.0, 0.0, 1.0};
GLfloat mat_emission[] = {0.0, 0.0, 0.0, 1.0};
GLfloat mat_shininess = 0;

glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, mat_ambient);
glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, mat_diffuse);
glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, mat_specular);
glMaterialfv(GL_FRONT_AND_BACK, GL_EMISSION, mat_emission);
glMaterialf(GL_FRONT_AND_BACK, GL_SHININESS, mat_shininess);
endsnippet

snippet glInfo
glColor3f(1.0f, 1.0f, 1.0f);
glWindowPos2i(10, 492);
GLchar info[512];
sprintf(info,
	"qQ : mean : %.2f \n"
	"eE : count : %d \n",
	mean, count
);
glutBitmapString(GLUT_BITMAP_9_BY_15, (const GLubyte*)info);
endsnippet

snippet glFramebuffer
glGenFramebuffers(1, &${1:fbo});
glBindFramebuffer(GL_FRAMEBUFFER, $1);
glFramebufferTexture2D(
	GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, ${2:colorTex}, 0);
if (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)
	printf("incomplete frame buffer\n");
endsnippet

snippet glLightModel
GLfloat lmodel_ambient[] = {0.2, 0.2, 0.2, 1.0}; 
glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);
glLightModeli(GL_LIGHT_MODEL_COLOR_CONTROL, GL_SINGLE_COLOR);
glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER, 0);
glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, 0);
endsnippet

snippet glVao
GLuint ${1:vao};
GLuint ${2:vbo};
glGenVertexArrays(1, &$1);
glGenBuffers(1, &$2);

glBindVertexArray($1);
glBindBuffer(GL_ARRAY_BUFFER, $2);
glBufferData(GL_ARRAY_BUFFER, ${3:vertices}.size() * sizeof(item),
	value_ptr(vertices[0]), GL_STATIC_DRAW);

glVertexAttribPointer(
	${4:location}, 3, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));
glEnableVertexAttribArray($4);
endsnippet

snippet glMatrixAttrib
GLint location = getAttribLocation(myProgram, "modelMatrix");

glBindVertexArray(vao);
GLuint buffer;
glGenBuffers(1, &buffer);
glBindBuffer(GL_ARRAY_BUFFER, buffer);
glBufferData(GL_ARRAY_BUFFER, modelMatrixes.size() * sizeof(mat4),
	value_ptr(modelMatrixes[0]), GL_STATIC_DRAW);

glVertexAttribPointer
	location + 0, 4, GL_FLOAT, GL_FALSE, sizeof(mat4), BUFFER_OFFSET(0));
glVertexAttribPointer(
	location + 1, 4, GL_FLOAT, GL_FALSE, sizeof(mat4), BUFFER_OFFSET(16));
glVertexAttribPointer(
	location + 2, 4, GL_FLOAT, GL_FALSE, sizeof(mat4), BUFFER_OFFSET(32));
glVertexAttribPointer(
	location + 3, 4, GL_FLOAT, GL_FALSE, sizeof(mat4), BUFFER_OFFSET(48));

glEnableVertexAttribArray(location + 0);
glEnableVertexAttribArray(location + 1);
glEnableVertexAttribArray(location + 2);
glEnableVertexAttribArray(location + 3);

glVertexAttribDivisor(location + 0, 1);
glVertexAttribDivisor(location + 1, 1);
glVertexAttribDivisor(location + 2, 1);
glVertexAttribDivisor(location + 3, 1);
endsnippet

snippet glRotateState
GLint ${1:polygonMode};
glGetIntegerv(GL_POLYGON_MODE, $1);
$1 = ${2:GL_POINT} + ($1 + 1 - $2) % ${3:3};
endsnippet

snippet glDecompose
glm::vec3 scale;
glm::quat rotation;
glm::vec3 translation;
glm::vec3 skew;
glm::vec4 perspective;
glm::decompose(
*mViewMatrix, scale, rotation, translation, skew, perspective);
rotation = glm::conjugate(rotation);
endsnippet

## qt
snippet qtClass
class ${1:ClassName} : public ${2:QWidget}
{
	Q_OBJECT
public:
	$1(QWidget *parent = 0);

signals:

slots:

};
endsnippet

snippet qtConnect
connect(${1:buttonBox}, SIGNAL(${2:accepted()}), ${3:this}, SLOT(${4:accept())});
endsnippet

snippet qtMain
#include <QApplication>

int main(int argc, char *argv[])
{
	QApplication app(argc, argv);
	${0}
	return app.exec();
}
endsnippet

## boost
snippet boostTestDynamic
#define BOOST_TEST_MODULE ${1:test decorator}
#define BOOST_TEST_DYN_LINK
#include <boost/test/unit_test.hpp>
#include <boost/test/data/test_case.hpp>

namespace ut = boost::unit_test;
namespace utd = boost::unit_test::data;
namespace utf = boost::unit_test::framework;
endsnippet

snippet boostAutoTestSuite
BOOST_AUTO_TEST_SUITE(${1:suiteName})
BOOST_AUTO_TEST_SUITE_END()
endsnippet

snippet boostTestCase
BOOST_${1:AUTO}_TEST_CASE${2:}(${3:caseName})
{
$0
}
endsnippet
