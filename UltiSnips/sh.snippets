snippet arr "${array[@]}" w
"${${1:arr}[${2:@}]}"
endsnippet

snippet read_file "read file in old style (while) line by line"
# clear IFS='' if you don't need leading and trailing white space
while IFS='' read -r line || [[ -n "$line" ]] ; do
	echo "$line"
done
endsnippet

snippet read_nest_file "nest read"
# you may replace -u 10 line  with line <&10, it's posix compilant
while IFS='' read -r -u 10 line || [[ -n "$line" ]] ; do
	cat > some_file
	echo "$line"
done 10<data
endsnippet

snippet read_nest_stdin "nest read stdin"
exec 3</dev/tty || exec 3<&0

while read -r line; do
	do_something "${args[@]}" <&3
done <sample.text

exec 3<&-
endsnippet

snippet read_into_array "read stream into array, handle last element properly, no blank, no missing"
unset -v ${1:arr}
while IFS= read -r || [[ -n $REPLY ]] ; do
	$1+=($REPLY)
done <${2:file}
endsnippet

snippet main
#!/usr/bin/env bash

set -eux -o pipefail
shopt -s failglob

show_usage()
{
	echo "
  Usage: ${0##*/}

  Options:
    -h  Show this help.
"
}

while getopts ":h" opt; do
	case $opt in
		h)
			show_usage
			exit 0
			;;

		* )
			echo -e "\n  Option does not exist : $OPTARG\n"
			usage; exit 1
			;;
	esac
done
shift $((OPTIND-1))

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &>/dev/null && pwd )"

exit 0
endsnippet

snippet ift
if [[ ${1:cond} ]]; then ${2:A}; else ${3:B}; fi
endsnippet

snippet #! "she bang" b
#!/usr/bin/env bash
endsnippet
